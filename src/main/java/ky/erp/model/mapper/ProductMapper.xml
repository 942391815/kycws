<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="ky.erp.model.Product">

	<resultMap id="RM_Product" type="ky.erp.model.Product">
        <result property="id" column="id"/>
        <result property="sheetId" column="sheet_id"/>
        <result property="format" column="format"/>
        <result property="originalCount" column="original_count"/>
        <result property="realCount" column="real_count"/>
        <result property="price" column="price"/>
        <result property="remark" column="remark"/>
        <result property="createTime" column="create_time"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,sheet_id,format,original_count,real_count,price,remark,create_time
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO product (
        	id ,
        	sheet_id ,
        	format ,
        	original_count ,
        	real_count ,
        	price ,
        	remark ,
        	create_time 
        ) VALUES (
        	#{id} ,
        	#{sheetId} ,
        	#{format} ,
        	#{originalCount} ,
        	#{realCount} ,
        	#{price} ,
        	#{remark} ,
        	#{createTime} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
	
	
     <sql id="update_sql">
         <set>
                <if test="sheetId != null">
	         	sheet_id = #{sheetId} ,
	         </if>
                <if test="format != null and format != ''">
	         	format = #{format} ,
	         </if>
                <if test="originalCount != null">
	         	original_count = #{originalCount} ,
	         </if>
                <if test="realCount != null">
	         	real_count = #{realCount} ,
	         </if>
                <if test="price != null">
	         	price = #{price} ,
	         </if>
                <if test="remark != null and remark != ''">
	         	remark = #{remark} ,
	         </if>
                <if test="createTime != null">
	         	create_time = #{createTime} 
	       </if>
       </set>
    </sql>
    
	<update id="update" >
	        UPDATE  product
	    <include refid="update_sql" />
	        WHERE 
	                id = #{id} 
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM product WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="RM_Product">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM product 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
               <if test="id != null">
		             AND id = #{id}
	           </if>
               <if test="sheetId != null">
		             AND sheet_id = #{sheetId}
	           </if>
                <if test="format != null and format !=''">
		             AND format = #{format}
	            </if>
               <if test="originalCount != null">
		             AND original_count = #{originalCount}
	           </if>
               <if test="realCount != null">
		             AND real_count = #{realCount}
	           </if>
               <if test="price != null">
		             AND price = #{price}
	           </if>
                <if test="remark != null and remark !=''">
		             AND remark = #{remark}
	            </if>
		       <if test="createTimeBegin != null">
					AND create_time >= #{createTimeBegin}
			   </if>
			   <if test="createTimeEnd != null">
					AND create_time &lt;= #{createTimeEnd}
			   </if>
		</where>
	</sql>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM product 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="RM_Product">
    	SELECT <include refid="columns" />
	    FROM product 
		<include refid="findPage_where"/>
		
		<if test="sortColumns != null and sortColumns !=''">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

